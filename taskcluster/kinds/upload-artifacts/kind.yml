# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
---

loader: taskgraph.loader.transform:loader

transforms:
    - taskgraph.transforms.from_deps
    # step_dir is calculated based on a number of attributes from
    # the upstream task. we can't reasonable express that in yml, so
    # we let a transform do it instead
    - translations_taskgraph.transforms.upload_artifacts
    - translations_taskgraph.transforms.resolve_upload_bucket
    # Used to skip appropriate upload-artifact tasks when tasks are morphed
    # into continuation tasks, and neither those nor their upstreams
    # should have uploads done for them.
    - translations_taskgraph.transforms.continuation
    - taskgraph.transforms.task_context
    - taskgraph.transforms.cached_tasks
    - taskgraph.transforms.task

# Any kinds containing tasks that we want to upload artifacts for must be
# listed here.
kind-dependencies:
    - backtranslations-mono-trg-chunk
    - backtranslations-mono-trg-dechunk-translations
    - backtranslations-mono-trg-translate
    - backtranslations-train-backwards-model
    - build-vocab
    - corpus-align-backtranslations
    - corpus-align-parallel
    - corpus-align-distillation
    - corpus-analyze-mono
    - corpus-analyze-parallel
    - corpus-clean-mono
    - corpus-clean-parallel
    - corpus-clean-parallel-bicleaner-ai
    - corpus-clean-parallel-fetch-bicleaner-model
    - corpus-merge-devset
    - corpus-merge-distillation
    - corpus-merge-mono
    - corpus-merge-parallel
    - distillation-corpus-build-shortlist
    - distillation-corpus-final-filtering
    - distillation-mono-src-chunk
    - distillation-mono-src-dechunk-translations
    - distillation-mono-src-translate
    - distillation-parallel-src-chunk
    - distillation-parallel-src-dechunk-translations
    - distillation-parallel-src-extract-best
    - distillation-parallel-src-translate
    - distillation-parallel-src-translations-score
    - distillation-student-model-finetune
    - distillation-student-model-quantize
    - distillation-student-model-train
    - evaluate
    - evaluate-quantized
    - evaluate-teacher-ensemble
    - export
    - train-teacher-model

tasks:
    upload-artifacts:
        # name is substituted by `task-context`, which is an implicitly available
        # context item:
        # https://taskcluster-taskgraph.readthedocs.io/en/latest/reference/transforms/task_context.html#implicit-context
        label: upload-artifacts-{name}
        description: >
            Upload artifacts from parts of the training pipeline to long term storage.

            All included tasks have their log files uploaded. Aside from that, the following
            tasks have all of their other files uploaded:
                * backtranslations-train-backwards-model
                * distillation-student-model-finetune
                * distillation-student-model-quantize
                * distillation-student-model-train
                * train-teacher-model
                * export
                * All evaluate tasks

            Destinations use include src_locale, trg_locale, experiment name, decision task id
            and a distinct directory for each task to ensure uniqueness and avoid overwrites.

            Additionally, logs are uploaded to a top-level `logs` directory while other artifacts
            are uploaded to a top-level `models` directory.

        from-deps:
            # Generate a separate `upload-artifacts` task for each task generated
            # by each entry in `kind-dependencies`. These tasks will have one upstream
            # task: the one they are uploading artifacts from. They will run
            # immediately after each task (ie: they depend on nothing else, have no
            # relation to one another).
            group-by: single
            # This will pull in stage, src_locale, trg_locale, etc. attributes
            copy-attributes: true
            set-name: retain-kind
        cache:
            type: upload
            name: upload-artifacts
            digest-data: []
    
        task-context:
            from-parameters:
                src_locale: training_config.experiment.src
                trg_locale: training_config.experiment.trg
                experiment_name: training_config.experiment.name
                training_config_bucket: training_config.taskcluster.upload-bucket
            substitution-fields:
                - attributes
                - worker.artifact-map
                - worker.bucket
                - label
                - cache.name
        worker-type: upload-artifacts
        run-on-tasks-for: []
        worker:
            app-name: translations
            # the `development` bucket pushes to the non-production GCS bucket
            # (moz-fx-translations-data--5f91-stage-translations-data)
            # and should be used to push artifacts that don't need to live
            # indefinitely. PRs and manual training runs from PRs fall into
            # this category, and thus we hardcode it here to avoid, eg:
            # manual training runs from PRs accidentally uploading to the
            # release bucket. Sometimes other manual training runs can also
            # be in this category (eg: for testing work on `dev-` branches).
            # the `production` bucket pushes to the production GCS bucket
            # (moz-fx-translations-data--303e-prod-translations-data) and
            # should be used when preserving artifacts indefinitely is
            # important. This is the default in the training config but can
            # be adjusted when needed.
            bucket:
                by-tasks-for:
                    github-pull-request: development
                    pr-action: development
                    default: "{training_config_bucket}"
            # upstream artifacts defines which artifacts from upstream tasks we want to upload
            upstream-artifacts:
                by-upstream-kind:
                    # Tasks from kinds matching these patterns will have all artifacts
                    # uploaded; other steps will only have logs uploaded.
                    (backtranslations-train-backwards.*|distillation-student.*|evaluate.*|export|train-teacher.*):
                        - "public/build/*"
                        - "public/logs/*"
                    default:
                        - "public/logs/*"
    
            # artifact map determines _where_ in a bucket we will put any artifacts fetched
            # from upstream tasks.
            # artifacts not matching a more specific pattern will fall back to the "*" pattern
            artifact-map:
                by-upstream-kind:
                    (distillation-student.*|evaluate.*|export|train-teacher.*):
                        # task-reference's are a special notation that allow us to
                        # indicate to taskgraph that we want <FOO> to be replaced with
                        # the task id of FOO, which is not known until very late in
                        # the taskgraph generation process
                        # https://firefox-source-docs.mozilla.org/taskcluster/taskgraph.html#task-parameterization
                        "*.log":
                            - {
                                "task-reference": "logs/{src_locale}-{trg_locale}/{experiment_name}_<decision>/{step_dir}/"
                              }
                        "*":
                            - {
                                "task-reference": "models/{src_locale}-{trg_locale}/{experiment_name}_<decision>/{step_dir}/"
                              }
                    default:
                        "*.log":
                            - {
                                "task-reference": "logs/{src_locale}-{trg_locale}/{experiment_name}_<decision>/{step_dir}/"
                              }
